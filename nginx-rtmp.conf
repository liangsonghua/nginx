1.安装转码工具Mencoder和ffmpeg
2.安装nginx相关模块
nginx_mod_h264_streaming-2.2.7让nginx支持flv/mp4流播放
nginx-rtmp-module让nginx支持rtmp/hls协议
ngx_cache_purge-master为清缓存的模块


./configure --prefix=/usr/local/nginx \
  --with-pcre=/home/pidan/tar/pcre-8.37 \
   --with-openssl=/home/pidan/tar/openssl-1.0.0e \
  --pid-path=/usr/local/nginx/logs/nginx.pid  \
  --add-module=/home/pidan/tar/ngx_cache_purge-master \
  --add-module=/usr/local/rtmp/nginx-rtmp-module  \
   --add-module=/home/pidan/tar/nginx_mod_h264_streaming-2.2.7 \
   --with-http_stub_status_module\
   --with-http_ssl_module \
  --with-http_sub_module \
  --with-http_gzip_static_module\
   --with-http_flv_module \


worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    server {
        listen       8080;
        server_name  localhost;
        location / {
        root /usr/local/rtmp/nginx-rtmp-module-master/test/rtmp-publisher;
        }
    location /stat {
        rtmp_stat all;
        rtmp_stat_stylesheet stat.xsl;
    }
    location /stat.xsl {
        root /usr/local/rtmp/nginx-rtmp-module-master;
    }
    location /control {
        rtmp_control all;
 
    }
}
    server {
    listen        80;
    server_name     localhost;
    location / {
        root /usr/local/nginx/html;
        index index.html;
    }
    location ~ \.flv$ {
        root /usr/local/nginx/html/vod;
        flv;
        limit_conn addr 20;
        limit_rate 200k;
    }
    location ~ \.mp4$ {
        root /usr/local/nginx/html/vod;
        mp4;
        limit_conn addr 20;
        limit_rate 200k;
    }
    location /hls {
        alias /usr/local/nginx/html/hls;
    }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
rtmp {
    server {
    listen 1935;
    chunk_size 4000;
	    application vod {
	        play /usr/local/nginx/html/vod;
	    }
	    application hls {
	            hls on;
	            hls_path /usr/local/nginx/html/hls;
	            hls_fragment 10s;
	    }
    }
}





产生一个rtmp直播流
ffmpeg -re -i /home/pidan/video/sample.flv -vcodec copy -acodec copy -f flv rtmp://192.168.122.128/hls/mystream

根据nginx.conf中的hls_path配置，这个命令会向主机的/usr/local/nginx/html/hls下面写入ts片段和m3u8文件

这个目录下的文件会动态刷新，前面写入的ts片段会被后面的ts片段覆盖。当这个直播流播完后，所有相关的ts片段和m3u8文件都将被删除。

/*
参数详解
-i 指定输入文件
-f 输出格式
-acodec 指定声音编码器
-vcodec 指定视频编码器
-b 指定视频流量
-ab 指定声音流量
FFmpeg可使用众多参数，参数内容会根据ffmpeg版本而有差异，使用前建议先参考参数及编解码器的叙述。此外，参数明细可用 ffmpeg -h 显示；编解码器名称等明细可用 ffmpeg -formats 显示。

下列为较常使用的参数。
主要参数
-i 设定输入档名。
-f 设定输出格式。
-y 若输出档案已存在时则覆盖档案。
-fs 超过指定的档案大小时则结束转换。
-ss 从指定时间开始转换。
-title 设定标题。
-timestamp 设定时间戳。
-vsync 增减Frame使影音同步。

影像参数
-b 设定影像流量，默认为200Kbit/秒。（ 单位请参照下方注意事项 ）
-r 设定FrameRate值，默认为25。
-s 设定画面的宽与高。
-aspect 设定画面的比例。
-vn 不处理影像，于仅针对声音做处理时使用。
-vcodec 设定影像影像编解码器，未设定时则使用与输入档案相同之编解码器。
 
声音参数
-ab 设定每Channel （最近的SVN 版为所有Channel的总合）的流量。（ 单位 请参照下方注意事项 ）
-ar 设定采样率。
-ac 设定声音的Channel数。
-acodec 设定声音编解码器，未设定时与影像相同，使用与输入档案相同之编解码器。
-an 不处理声音，于仅针对影像做处理时使用。
-vol 设定音量大小，256为标准音量。(要设定成两倍音量时则输入512，依此类推。)

注意事项
以-b及ab参数设定流量时，根据使用的ffmpeg版本，须注意单位会有kbits/sec与bits/sec的不同。（可用ffmpeg -h显示说明来确认单位。）

例如，单位为bits/sec的情况时，欲指定流量64kbps时需输入‘ -ab 64k ’；单位为kbits/sec的情况时则需输入‘ -ab 64 ’。
以-acodec及-vcodec所指定的编解码器名称，会根据使用的ffmpeg版本而有所不同。例如使用AAC编解码器时，会有输入aac 与 libfaac的情况。此外，编解码器有分为仅供解码时使用与仅供编码时使用，因此一定要利用ffmpeg -formats 确 认输入的编解码器是否能运作。

*/
